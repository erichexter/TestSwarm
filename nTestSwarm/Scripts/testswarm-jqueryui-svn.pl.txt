#!/usr/bin/perl

# CONFIGURE

# The location of the TestSwarm that you're going to run against.

my $SWARM = "http://localhost";

# Your TestSwarm username.
my $USER = "[REPLACE THIS]";

## replace this
# Your authorization token.
my $AUTH_TOKEN = "[REPLACE THIS]";

# The maximum number of times you want the tests to be run.
my $MAX_RUNS = 5;

# The URL from which a copy will be checked out.
my $RCS_URL = "http://jquery-ui.googlecode.com/svn/trunk";

# The directory in which the checkouts will occur.
my $BASE_DIR = "[REPLACE THIS PATH]/tmp-checkout";

# Any build commands that need to happen.

my $BUILD = "";

# The name of the job that will be submitted
# (pick a descriptive, but short, name to make it easy to search)

# Note: The string {REV} will be replaced with the current
#       commit number/hash.
my $JOB_NAME = "jQuery UI Commit <a href=\"http://dev.jqueryui.com/changeset/{REV}\">#{REV}</a>";

# The browsers you wish to run against. Options include:
#  - "all" all available browsers.
#  - "popular" the most popular browser (99%+ of all browsers in use)
#  - "current" the current release of all the major browsers
#  - "gbs" the browsers currently supported in Yahoo's Graded Browser Support
#  - "beta" upcoming alpha/beta of popular browsers
#  - "popularbeta" the most popular browser and their upcoming releases
my $BROWSERS = "popularbeta";

# All the suites that you wish to run within this job
# (can be any number of suites)

## insert static suite list here
my %SUITES = ();


# Comment these out if you wish to define a custom set of SUITES above
my $SUITE = "http://jquery-ui.googlecode.com/svn-history/r{REV}/trunk";
sub BUILD_SUITES {
	%SUITES = map { /(\w+).html$/; $1 => "$SUITE/$_?$1"; } glob("tests/unit/*/*.html");
    
    print "suites: $SUITES";
    print %SUITES;
}

## TODOs
# check if c/o exists, if not, svn co non-recursive of trunk
# go into, do svn up
# parse output, looking for at Revision {REV}
# insert that into the suites URLs
# submit, along with other parameters, to TestSwarm

########### NO NEED TO CONFIGURE BELOW HERE ############

my $DEBUG = 1;
my $fresh;

# Check out a specific revision
if ( ! -e $BASE_DIR ) {
	print "svn co $RCS_URL $co_dir\n" if ( $DEBUG );
	`svn co $RCS_URL $BASE_DIR`;
    $fresh = 1;
}

if ( ! -e $BASE_DIR ) {
    die "Problem checking out source.";
}

print "chdir $BASE_DIR\n" if ( $DEBUG );
chdir( $BASE_DIR );

my $previous;
my $rev;

if (!$fresh) {
    print "svn info | grep Revision\n" if ( $DEBUG );
    $previous = `svn info | grep Revision`;
    $previous =~ s/Revision: //;
    $previous =~ s/\s*//g;
    print "Previous revision: $previous\n" if ( $DEBUG );
    if ( ! $previous ) {
        die "Previous revision information not found.";
    }
    
    print "svn up\n" if ( $DEBUG );
    $rev = `svn up | grep Revision`;
}

print "svn info | grep Revision\n" if ( $DEBUG );
$rev = `svn info | grep Revision`;
$rev =~ s/Revision: //;
$rev =~ s/\s*//g;
print "New revision: $rev\n" if ( $DEBUG );
if ( ! $rev ) {
    die "New revision information not found.";
}

if (true || $fresh || $previous != $rev ) {

	if ( exists &BUILD_SUITES ) {
		&BUILD_SUITES();
	}

	my %props = (
		"state" => "addjob",
		"output" => "dump",
		"user" => $USER,
		"max" => $MAX_RUNS,
		"job_name" => $JOB_NAME,
		"browsers" => $BROWSERS,
		"auth" => $AUTH_TOKEN
	);

	my $query = "";

	foreach my $prop ( keys %props ) {
		$query .= ($query ? "&" : "") . $prop . "=" . clean($props{$prop});
	}

	foreach my $suite ( sort keys %SUITES ) {
		$query .= "&suites[]=" . clean($suite) .
		          "&urls[]=" . clean($SUITES{$suite});
	}

	print "curl -d \"$query\" $SWARM\n" if ( $DEBUG );

	my $results = `curl -d "$query" $SWARM`;

	print "Results: $results\n" if ( $DEBUG );

	if ( $results ) {
		open( F, ">$rev/results.txt" );
		print F "$SWARM$results";
		close( F );

	} else {
		die "Job not submitted properly.";
	}
} else {
    print "No new revision." if ( $DEBUG );
}

sub clean {
  my $str = shift;
	$str =~ s/{REV}/$rev/g;
	$str =~ s/([^A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg;
	$str;
}
